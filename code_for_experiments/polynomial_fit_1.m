function [res, gof] = polynomial_fit_1(mask, b, expx, expy)
%CREATEFIT(X,Y,B)
%  Create a fit.
%
%  Data for 'untitled fit 1' fit:
%      X Input : X
%      Y Input : Y
%      Z Output: b
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 09-Sep-2020 17:39:54


%% Fit: 'untitled fit 1'.
    [dim_y,dim_x]=size(b);
    y_axis=(1:dim_y)';
    x_axis=(1:dim_x);
    X=x_axis.*ones(dim_y,dim_x);
    Y=y_axis.*ones(dim_y,dim_x);
    X_1=X(mask);
    Y_1=Y(mask);
    [xData, yData, zData] = prepareSurfaceData( X_1, Y_1, b(mask));
    meanX=mean(xData);
    stdX=std(xData);
    meanY=mean(yData);
    stdY=std(yData);
    
% % Set up fittype and options.
%     ft = fittype( ['poly',num2str(expx),num2str(expy)]);
%     opts = fitoptions( 'Method', 'LinearLeastSquares' );
%     opts.Normalize = 'on';
%     opts.Robust = 'Bisquare';
% 
% % Fit model to data.
%     [fitresult, gof] = fit( [xData, yData], zData, ft, 'Normalize', 'on' );
    exponentsx=repmat(0:expx,[1,expy+1]);
    exponentsy=repelem(0:expy,[(expx+1).*ones(1,expy+1)]);
    parameters=[((xData-meanX)/stdX).^(exponentsx).*((yData-meanY)/stdY).^(exponentsy),ones(length(xData),1)]\zData;
%%% part added
%     mask=b(:)<feval(fitresult,[X(:),Y(:)]);
    mask=b(:)<sum(parameters'.*[((X(:)-meanX)/stdX).^(exponentsx).*((Y(:)-meanY)/stdY).^(exponentsy),ones(length(X(:)),1)],2);
    if sum(mask)==0
        res=0.*b;
        gof=0;
    else
    X_1=X(mask);
    Y_1=Y(mask);
    [xData, yData, zData] = prepareSurfaceData( X_1, Y_1, b(mask));
%     ft = fittype( ['poly',num2str(expx),num2str(expy)]);
%     opts = fitoptions( 'Method', 'LinearLeastSquares' );
%     opts.Normalize = 'on';
%     opts.Robust = 'Bisquare';
    meanX=mean(xData);
    stdX=std(xData);
    meanY=mean(yData);
    stdY=std(yData);
     
%     [fitresult, gof] = fit( [xData, yData], zData, ft, 'Normalize', 'on' );
    parameters=[((xData-meanX)/stdX).^(exponentsx).*((yData-meanY)/stdY).^(exponentsy),ones(length(xData),1)]\zData;

%     res=reshape(b(:)-feval(fitresult,[X(:),Y(:)]),dim_y,dim_x);
    res=reshape(b(:)-sum(parameters'.*[((X(:)-meanX)/stdX).^(exponentsx).*((Y(:)-meanY)/stdY).^(exponentsy),ones(length(X(:)),1)],2),dim_y,dim_x);
    end